typeset -U PATH # Prevents duplicate PATH entries. zsh only, so it's set prior to sourcing anything that might set PATH.

# Autocompletions
# These are the one thing in this file that I don't even begin to understand.
autoload -Uz compinit
compinit

# Run .profile after completion is ready in case it wants to
# define any completion functions.
source $HOME/.profile

mkdir -p "$XDG_CACHE_HOME"

setopt hist_expire_dups_first hist_ignore_dups hist_ignore_space
HISTFILE="$XDG_CACHE_HOME/zsh_history"
HISTSIZE=1200
SAVEHIST=1000
setopt PROMPT_SUBST

autoload -U colors && colors

set -o emacs

flavor=$(uname)

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _ignored _correct #_approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' file-sort modification
zstyle ':completion:*' format '%F{blue}Completing %d%f'
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent ..
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list '+' '+m:{[:lower:]}={[:upper:]}' '+r:|[._-]=** r:|=**' '+'
#zstyle ':completion:*' max-errors 3
zstyle ':completion:*' menu select=0
zstyle ':completion:*' original false
zstyle ':completion:*' prompt 'Corrections (%e):'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' substitute 1
zstyle ':completion:*' verbose true

h=()
if [[ -r ~/.ssh/config ]]; then
    h=($h ${${${(@M)${(f)"$(cat ~/.ssh/config)"}:#Host *}#Host }:#*[*?]*})
fi
if [[ $#h -gt 0 ]]; then
    zstyle ':completion:*:ssh:*' hosts $h
    zstyle ':completion:*:slogin:*' hosts $h
fi

is_available () {
    /usr/bin/which $@ > /dev/null 2>&1
}

# General aliases
alias tmx='tmux new-session -A -s $USER'
alias src='source $HOME/.zshrc'
alias xcode='open *.xcworkspace || open *.xcodeproj' # Stolen from http://www.codeography.com/2009/10/28/open-xcode-project-from-the-command-line.html
alias keychain='keychain --absolute --dir $XDG_CACHE_HOME/keychain'
alias truncate='cut -c 1-$(stty size | cut -f 2 -d " ")'
alias projroot='cd $(git rev-parse --show-toplevel)'
alias f='find . -name'
alias browse='fzf --bind="enter:execute(echo -n {} | pbcopy)" --preview="pygmentize {} 2>/dev/null || cat {}" --preview-window=up'
alias ipy="ipython"

is_available nvim && alias view='nvim -R' # nvim doesn't provide `view`, which means it will run vim unless I override it when nvim is around.

# Colorful ls!
case $flavor in
    "Linux")
        alias ls='ls -F --color=auto'
        export LS_COLORS='di=33:fi=0:ln=35:pi=34:so=36:bd=7;32:cd=32:or=37:mi=0:ex=31'
        ;;
    "Darwin")
        alias ls='ls -FG'
        export LSCOLORS=dxfxgxexbxxccxBxBxdADA
        export CLICOLOR=1
        ;;
esac

# Functions

configure () {
    config_file=$(find -L $XDG_CONFIG_HOME -type f -path "*$1" -print | head -n 1)
    [[ -z "$config_file" ]] && config_file=$(find -L $HOME -mindepth 1 -maxdepth 1 -name "*$1" -print | head -n 1) # Fall back on "classic" dotfiles.
    [[ -n "$config_file" ]] && $EDITOR "$config_file" || echo "No config file by that name."
}

yank () { # Copy the n-th last command run to the clipboard.
    # ${1:-1} gets the first argument, defaulting to 1. Not confusing at all.
    last="$(echo -n $(fc -l -${1:-1} -${1:-1} | sed -E 's/ [0-9]+  //'))"
    case $flavor in
        "Darwin") echo -ne "$last" | pbcopy;;
        "Linux") echo -ne "$last" | xclip;;
    esac
}

current_repo () {
    repo=$(git rev-parse --show-toplevel 2> /dev/null)
    [[ -n $repo ]] && echo $(basename "$repo")
}

# tmux integration

name_tmux_window () {
    # At the moment, this only uses git repo names. More could be added, though.

    is_available tmux && [[ -n $TMUX ]] || return

    repo_name=$(current_repo)

    # We need a flag to rememeber if we're the ones who set the window name,
    # but tmux environements are per-session. Use allow-rename as a hack.
    # Setting it to off breaks nothing, because we are already disabling the
    # automatic rename. When done, we unset it, allowing it to return to
    # inheriting from the session. However, we can still tell whether we set it,
    # because when inherited, show-option returns nothing rather than the value.

    if [[ -n $repo_name ]]; then
        # To set the name, it must not already be set manually.
        [[ -z $(tmux show-option -wv allow-rename) ]] &&
        [[ $(tmux show-option -wv automatic-rename) == 'off' ]] && return

        tmux set-option -wt${TMUX_PANE} allow-rename 'off' 1>/dev/null
        tmux rename-window -t${TMUX_PANE} "$repo_name"
    else
        # Only unset the name if we set it.
        [[ $(tmux show-option -wv allow-rename) == 'off' ]] || return

        tmux set-option -wt${TMUX_PANE} -u allow-rename 1>/dev/null
        tmux set-option -wt${TMUX_PANE} automatic-rename 'on' 1>/dev/null
    fi
}

# Prompt

count_git_items () {
    echo "$1" | awk "{c+=gsub(/$2/,\"\")} END{print c+0}"
}

build_prompt () {
    local code="$?" # Grab the exit code first thing so we can use it later.

    PROMPT="%(#.%F{red}ROOT%f.%F{white}%n)%F{white} @ %m : %f%F{yellow}%d%f"

    repo_name=$(current_repo)
    if [[ -n $repo_name ]]; then
        # We're in a git repo, so activate the special prompt.
        git_name=$(git config user.name)

        subpath=$(git rev-parse --show-prefix)
        [ -n "$subpath" ] && subpath="/$subpath" # Only display a slash if we're actually in a subdirectory.

        unstage_status=""
        stage_status=""

        git_status=$(git status --short --branch)

        branch_line=$(echo "$git_status" | grep "^##")
        branch=$(echo "$branch_line" | cut -f2- -d' ' | cut -f1 -d'.')
        drift=$(echo "$branch_line" | sed -n "s/.*\[.*ahead \(.*\).*\].*/→\1 /p")
        drift="$drift$(echo "$branch_line" | sed -n 's/.*\[.*behind \(.*\).*\].*/←\1 /p')"

        untracked=$(count_git_items "$git_status" "^\?\?")
        [ $untracked -ne 0 ] && unstage_status="$unstage_status %F{magenta}+$untracked"

        modified_unstaged=$(count_git_items "$git_status" "^.M")
        [ $modified_unstaged -ne 0 ] && unstage_status="$unstage_status %F{magenta}~$modified_unstaged"

        deleted_unstaged=$(count_git_items "$git_status" "^.D")
        [ $deleted_unstaged -ne 0 ] && unstage_status="$unstage_status %F{magenta}-$deleted_unstaged"

        added_staged=$(count_git_items "$git_status" "^A")
        [ $added_staged -ne 0 ] && stage_status="$stage_status %F{green}+$added_staged"

        modified_staged=$(count_git_items "$git_status" "^[MR]")
        [ $modified_staged -ne 0 ] && stage_status="$stage_status %F{yellow}~$modified_staged"

        deleted_staged=$(count_git_items "$git_status" "^D")
        [ $deleted_staged -ne 0 ] && stage_status="$stage_status %F{red}-$deleted_staged"

        divider=""
        [[ -n $unstage_status ]] && [[ -n $stage_status ]] && divider="%F{white} //%f"
        [[ -z $unstage_status ]] && [[ -z $stage_status ]] && divider="%F{white} ✓%f"

        branch="%F{blue}$branch"

        PROMPT="%F{white}$git_name ± %f%F{yellow}$repo_name%f%F{white}$subpath ⋋ $branch $drift%F{white}[$unstage_status$divider$stage_status %F{white}]%f"
    fi

    local nl=$'\n'
    local up down left right offset top_right

    arrow=">>"
    [[ -n $VIRTUAL_ENV ]] && arrow="❩❩"

    # Add in the "always-on" stuff:
    PROMPT="$PROMPT%1(j. %F{cyan}⎇ %j%f.)${nl}%(#.%B%F{red}.%F{blue})$arrow %f%b"

    # Set up the right-hand widgets:
    top_right=""

    RPROMPT=""
    if [[ -n "$top_right" ]]; then
        up=$'\e[1A'
        down=$'\e[1B'

        offset=1 # The LED is always in the second-to-last column, otherwise this would be 2.
        [[ $code > 0 ]] && offset=$(( $offset + ${#code} + 1 )) # +1 for the extra space between the code and dot.

        right=$'\e['$offset'C'
        left=$'\e['$offset'D'

        # Display the right-aligned widgets, then on the line with the actual prompt, display the last exit code and a status LED:
        RPROMPT="%{${up}${right}%}${top_right}%{${left}${down}%}"
    fi

    RPROMPT="$RPROMPT%(?.%F{green}.%F{red}%? )%{%G•%}%f"
}

# zsh hooks

precmd () {
    # Called before the prompt is rendered.
    build_prompt
}

chpwd () {
    # Called on each directory change.
    name_tmux_window
}

# Finally, stuff to run before the first prompt:

if is_available keychain; then
    local gpg_key_id=$(gpg --list-secret-keys | grep sec -A1 | tail -1 | awk '{$1=$1};1')
    eval $(keychain --quiet --agents ssh,gpg --eval $(find $HOME/.ssh -name id_\* ! -name '*\.pub') $gpg_key_id)
fi

homebrew_updates () {
    # Calls `brew update` if it's been a day since the last check, then prints any
    # `brew outdated` packages in a nice format.

    is_available brew || return # Make sure homebrew's around.

    local update_time_file="$XDG_CACHE_HOME/homebrew_update_time"

    # Check if the $update_time_file is more than 1 day old. By redirecting stderr to stout, this
    # counts the file not existing as the same thing as it being old, thus doing the update.
    if [[ -n $(find "$update_time_file" -maxdepth 0 -mtime +1d 2>&1) ]]; then
        echo "\x1b[33mUpdating Homebrew in the background…\x1b[0m"
        ((brew update && touch -t "$(date "+%m%d0500")" "$update_time_file") & disown) &>/dev/null
    fi

    local IFS=$'\n'
    local outdated=( $(brew outdated --verbose | grep -vFf <(cat <(brew list --pinned) <(echo "???")) | sed -E 's/(.+) \(.*\) < (.*)$/\\x1b[35m\1\\x1b[0m \2/') )

    if [[ -n "$outdated" ]]; then
        separator=", "
        outdated="$( printf "${separator}%s" "${outdated[@]}" )"
        outdated="${outdated:${#separator}}" # remove leading separator

        echo "\x1b[32;1mUpdates available\x1b[0m in Homebrew:"
        echo "    ${outdated[@]}"
    fi
}

mas_updates () {
    # Display available updates from the App Store in the same format
    # as for Homebrew.
    is_available mas || return

    local IFS=$'\n'
    local outdated=( $(mas outdated | sed -E 's/[0-9]+ (.+) \(.* -> (.*)\)$/\\x1b[35m\1\\x1b[0m \2/') )

    if [[ -n "$outdated" ]]; then
        separator=", "
        outdated="$( printf "${separator}%s" "${outdated[@]}" )"
        outdated="${outdated:${#separator}}" # remove leading separator

        echo "\x1b[32;1mUpdates available\x1b[0m in the App Store:"
        echo "    ${outdated[@]}"
    fi
}

name_tmux_window
homebrew_updates
mas_updates
