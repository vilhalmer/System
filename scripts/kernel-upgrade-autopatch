#!/usr/bin/env zsh
#
# Requires: bc, bison, flex

set -e
set -o pipefail

while [[ $# -gt 0 ]]; do
    case "$1" in
        --check)
            check_only=yes
            ;;
        --work-dir)
            shift
            work_dir="$1"
            mkdir -p "$work_dir"
            ;;
        *)
            target="$1"
            ;;
    esac
    shift
done

# Read the target package from stdin if it wasn't given, since we're usually run as an alpm hook.
[[ -z $target ]] && read target

# Fetch the current remote version. Assume it's in core.
target_version="$(pacinfo --short core/"$target" | perl -ne 'print if s/^.*? (.*?) .*$/\1/')"
[[ -z $target_version ]] && printf "Unable to determine target version" && exit 2

asp update "$target"

work_dir="${work_dir:-/opt/kernel}"
cd "$work_dir" && printf "\nWorking in $work_dir\n\n"

asp checkout "$target" 2>/dev/null && printf "WARNING: Clean checkout, this will take a while\n" || true
cd "$target"

# Releases aren't tagged in the package repo, so we have to look through the log.
# Checkout quietly to avoid the giant "detached HEAD" warning, but still show where we end up.
target_sha="$(git log --fixed-strings --grep="$target_version" --max-count=1 --format=format:%H)"
[[ -z $target_sha ]] && { printf "Failed to find version commit!\n"; exit 3; }

git checkout --quiet "$target_sha"
git log --oneline --max-count=1
cd "trunk"

if [[ -n $SUDO_USER && $UID -eq 0 ]]; then
    # makepkg can't be run as root, so downgrade to whoever we actually are.
    # We also need to be able to write into the directories.
    printf "Switching users to configure linux package...\n"
    MAKEPKG_USER="$SUDO_USER"
    chown -R "$MAKEPKG_USER" $work_dir
else
    MAKEPKG_USER="$USER"
fi

# Update the kernel source checkout (or clone it if needed, but this is slow), and apply config.
sudo -u "$MAKEPKG_USER" makepkg --nodeps --nobuild

# We need the patch directory relative to $patch_root to pass to make later.
patch_root="$work_dir/patches"
patches="$(cd "$patch_root" && find . -mindepth 1 -type 'f' -printf '%P\n')"

# Assume that the only directory under src is the kernel source.
cd "$(find src -maxdepth 1 -mindepth 1 -type d)"

for patch in $patches; do
    git apply --verbose --whitespace=nowarn "$patch_root/$patch"
done

# If we only wanted to see if things applied cleanly, we're done.
[[ -n $check_only ]] && exit 0

# Otherwise, on to module building.
kernel_version=$(cat version)

echo "Building modules for kernel $kernel_version"

make modules_prepare

for patch in $patches; do
    module="${patch%.*}.ko"
    make "$module"
    kernel-update-module "$module" "$kernel_version"
done
