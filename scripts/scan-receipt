#!/usr/bin/env zsh

set -uo pipefail
#export SANE_DEBUG_CARDSCAN=10


RECEIPT_DIR="${RECEIPT_DIR:-$HOME/Documents/receipts}"
SCAN_DIR="$RECEIPT_DIR/scans"
OCR_DIR="$RECEIPT_DIR/ocr"
IMAGE_FORMAT="tiff"
DATE_REGEX='.*?(?P<date>(\d{2,4}([.\/-]\s?|[^a-zA-Z\d])\d{2}([.\/-]\s?|[^a-zA-Z\d])(20)?1[3-6]))\s+'


# Grab the first scanner up front to reduce the overhead of each scan.
printf "Finding scanners...\n"
SCANNER=$(scanimage --formatted-device-list "%d" | head -n 1)
[[ -z $SCANNER ]] && printf "Error: no scanners found\n" && exit 1
printf "Using scanner: $SCANNER\n"


scan_ocr () {
    scanner="$1"
    dir="$(mktemp --directory --suffix=.ocr)"
    scanimage --device-name="$scanner" --format=$IMAGE_FORMAT --mode=gray 2>/dev/null | \
        tee "$dir/raw.$IMAGE_FORMAT" | \
        convert \
            $IMAGE_FORMAT:- \
            -shave 10 \
            -auto-level \
            -sharpen 0x4.0 \
            -contrast-stretch 15% \
            -morphology close square:1 \
            $IMAGE_FORMAT:- 2>/dev/null | \
        tee "$dir/clean.$IMAGE_FORMAT" | \
        tesseract \
            -c preserve_interword_spaces=true \
            -c load_system_dawg=false \
            -c load_freq_dawg=false \
            -c textord_space_size_is_variable=true \
            -l eng \
            --psm 6 \
            stdin "$dir/receipt" quiet 2>/dev/null
    code=$pipestatus[1]
    if [[ $code -ne 0 ]]; then
        rm -r $dir
    else
        printf "$dir\n"
    fi
    return $code
}


scan_forever () {
    while true; do
        printf "Waiting for receipt\n"

        # In order to scan in a loop, we're going to attempt to scan repeatedly
        # until it stops failing. The usual cause of failure is exit code 7,
        # meaning there's just nothing to scan yet.
        until result_dir=$(scan_ocr "$SCANNER"); do
            code=$?
            [[ -n $result_dir ]] && rm -r $result_dir  # Clean up failures.
            case $code in;
                3)  # "Device busy"
                    printf "Receipt might be too far into the tray\n"
                    sleep 3
                    ;;
                7)  # "Document feeder out of documents"
                    # Do nothing, just waiting for the user to insert one.
                    sleep 1
                    ;;
                0)
                    printf "BUG: Got success, exit code must have been overwritten\n"
                    return 1
                    ;;
                *)
                    printf "Unknown failure, bailing\n"
                    return $code
                    ;;
            esac
        done

        printf "$result_dir\n"
        #cat "$result_dir/receipt.txt" | perl -ne "print if s/$DATE_REGEX/\1/"
    done
}

scan_forever
